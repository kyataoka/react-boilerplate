/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const NotificationtestRouteLazyImport = createFileRoute('/notification_test')()
const ListRouteLazyImport = createFileRoute('/list')()
const AboutRouteLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()
const AboutPageLazyImport = createFileRoute('/about/$page')()

// Create/Update Routes

const NotificationtestRouteLazyRoute = NotificationtestRouteLazyImport.update({
  id: '/notification_test',
  path: '/notification_test',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/notification_test/route.lazy').then((d) => d.Route),
)

const ListRouteLazyRoute = ListRouteLazyImport.update({
  id: '/list',
  path: '/list',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/list/route.lazy').then((d) => d.Route))

const AboutRouteLazyRoute = AboutRouteLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about/route.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const AboutPageLazyRoute = AboutPageLazyImport.update({
  id: '/$page',
  path: '/$page',
  getParentRoute: () => AboutRouteLazyRoute,
} as any).lazy(() => import('./routes/about/$page.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/list': {
      id: '/list'
      path: '/list'
      fullPath: '/list'
      preLoaderRoute: typeof ListRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/notification_test': {
      id: '/notification_test'
      path: '/notification_test'
      fullPath: '/notification_test'
      preLoaderRoute: typeof NotificationtestRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/about/$page': {
      id: '/about/$page'
      path: '/$page'
      fullPath: '/about/$page'
      preLoaderRoute: typeof AboutPageLazyImport
      parentRoute: typeof AboutRouteLazyImport
    }
  }
}

// Create and export the route tree

interface AboutRouteLazyRouteChildren {
  AboutPageLazyRoute: typeof AboutPageLazyRoute
}

const AboutRouteLazyRouteChildren: AboutRouteLazyRouteChildren = {
  AboutPageLazyRoute: AboutPageLazyRoute,
}

const AboutRouteLazyRouteWithChildren = AboutRouteLazyRoute._addFileChildren(
  AboutRouteLazyRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutRouteLazyRouteWithChildren
  '/list': typeof ListRouteLazyRoute
  '/notification_test': typeof NotificationtestRouteLazyRoute
  '/about/$page': typeof AboutPageLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutRouteLazyRouteWithChildren
  '/list': typeof ListRouteLazyRoute
  '/notification_test': typeof NotificationtestRouteLazyRoute
  '/about/$page': typeof AboutPageLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/about': typeof AboutRouteLazyRouteWithChildren
  '/list': typeof ListRouteLazyRoute
  '/notification_test': typeof NotificationtestRouteLazyRoute
  '/about/$page': typeof AboutPageLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/about' | '/list' | '/notification_test' | '/about/$page'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/list' | '/notification_test' | '/about/$page'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/list'
    | '/notification_test'
    | '/about/$page'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AboutRouteLazyRoute: typeof AboutRouteLazyRouteWithChildren
  ListRouteLazyRoute: typeof ListRouteLazyRoute
  NotificationtestRouteLazyRoute: typeof NotificationtestRouteLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AboutRouteLazyRoute: AboutRouteLazyRouteWithChildren,
  ListRouteLazyRoute: ListRouteLazyRoute,
  NotificationtestRouteLazyRoute: NotificationtestRouteLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/list",
        "/notification_test"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/about": {
      "filePath": "about/route.lazy.tsx",
      "children": [
        "/about/$page"
      ]
    },
    "/list": {
      "filePath": "list/route.lazy.tsx"
    },
    "/notification_test": {
      "filePath": "notification_test/route.lazy.tsx"
    },
    "/about/$page": {
      "filePath": "about/$page.lazy.tsx",
      "parent": "/about"
    }
  }
}
ROUTE_MANIFEST_END */
